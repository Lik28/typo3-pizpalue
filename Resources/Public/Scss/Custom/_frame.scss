//
// Nested frame container
//
.container-fluid .frame-container,
.frame-container .frame-container {
  padding-left: 0;
  padding-right: 0;
}
//
// Full width container
//
.container-fluid .frame-container {
  max-width: none;
}
//
// Columns
//
// No side padding for content elements in columns
.pp-col > .frame > .frame-container {
  padding-left: 0;
  padding-right: 0;
}
// No top space for first element in column
.pp-col > .frame:first-child {
  padding-top:0 ;
}
// Compensate bottom space
.frame-type-gridelements_pi1 .row {
  @each $breakpoint in map-keys($frame-inner-spacing-scaling) {
    @include media-breakpoint-up($breakpoint) {
      $scaling: map-get($frame-inner-spacing-scaling, $breakpoint);
      margin-bottom: -($frame-inner-spacing * $scaling);
    }
  }
}
//
// Custom frames
//
.frame-pp1 > div > .frame-inner,
.frame-pp2 > div > .frame-inner,
.frame-pp3 > div > .frame-inner {
  border: $border-width solid;
  border-radius: $border-radius;
  //padding: $alert-padding-y 0;
  @each $breakpoint in map-keys($frame-inner-spacing-scaling) {
    @include media-breakpoint-up($breakpoint) {
      $scaling: map-get($frame-inner-spacing-scaling, $breakpoint);
      padding: ($alert-padding-y * $scaling) ($alert-padding-x * $scaling);
    }
  }
}
.frame-pp1 > div > .frame-inner {
  @include pp-make-frame-bg($primary);
}
.frame-pp2 > div > .frame-inner {
  @include pp-make-frame-bg($secondary);
}
.frame-pp3 > div > .frame-inner {
  @include pp-make-frame-bg($complementary);
}
